-- Write SQL queries to perform the following tasks using the Sakila database:

-- List the number of films per category.
select c.name, count(f.film_id) AS number_of_films
from category c
left join film f on c.category_id = f.film_id
group by c.name;

-- Retrieve the store ID, city, and country for each store.
select s.store_id, c.city, ct.country
from store s
left join address a on s.address_id = a.address_id
left join city c on a.city_id = c.city_id
left join country ct on c.country_id = ct.country_id;


-- Calculate the total revenue generated by each store in dollars.
select c.store_id, round(sum(p.amount)) as total_revenue
from customer c
left join payment p on c.customer_id = p.customer_id
group by c.store_id;

-- Determine the average running time of films for each category.
select c.name, avg(f.length) as average_running_time
from film_category fc
left join film f on fc.film_id = f.film_id
left join category c on c.category_id = fc.category_id
group by c.name;

-- Identify the film categories with the longest average running time.
select c.name, avg(f.length) as average_running_time
from film_category fc
left join film f on fc.film_id = f.film_id
left join category c on c.category_id = fc.category_id
group by c.name
order by average_running_time desc
limit 5;

-- Display the top 10 most frequently rented movies in descending order.
select f.title, count(r.rental_id) as rental_count
from inventory i
left join film f on i.film_id = f.film_id
left join rental r on r.inventory_id = i.inventory_id
group by f.title
order by rental_count desc
limit 10;


-- Determine if "Academy Dinosaur" can be rented from Store 1.
select count(*)
from inventory i
left join store s on i.store_id = s.store_id
left join film f on f.film_id = i.film_id
where f.title in ('Academy Dinosaur')
and s.store_id = 1;

-- Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
select distinct f.title,
case
when i.film_id is null then 'NOT available'
else 'Available'
end as availability_status
from film f
left join inventory i on f.film_id = i.film_id
order by f.title;